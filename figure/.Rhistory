setwd(../)
setwd("../homework")
setwd("../")
getwd()
setwd("../")
getwd()
setwd('./ProgAssignment3/')
getwd()
ls
dir()
data=read.csv('hospital-data.csv',header=T)
str(data)
head(data,1)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome
str(outcome)
str(outcome)
str(outcome,1)
dim(outcome)
names(outcome)
b=outcome$"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
..
)
R
Q
exit
1+1
""
"
b=outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
shape(b)
dim(b)
b
levels(b)
type(b)
class(b)
as.numeric(b)
remove(outcome)
ncols(data)
ncol(data)
names(data)
data$Hospital.Ownership
ncol(data)
names(data)
data <- read.csv("outcome-of-care-measures.csv")
names(data)
data$state
data$State
gl(data$State)
levels(data$State)
names(data)
grep('Heart',names(data))
'Heart' in names(data)
sapply(c('Heart','Failure'),grep1,names(data))
sapply(c('Heart','Failure'),regexpr,names(data))
length(names(data))
sapply(c('Heart','Failure'),regexpr,names(data),ignore.case=TRUE)
x=sapply(c('Heart','Failure'),regexpr,names(data),ignore.case=TRUE)
names(x)
x
x[:,1]
x[1]
x[1,]
type(x)
class(x)
x==-1
sum(x)
apply(x,sum)
colsumns(x)
rowSums(x)
which(rowSums(x)==2)
which(rowSums(x)==-2)
which(rowSums(x)!=-2)
names(data)
ranking=data[,11]
ranking
order(data[data[,11],])
type(data[,17])
class(data[,17])
data[order(data[,11]),]
aa=data[order(data[,11]),]
dim(aa)
aa[,11]
head(aa[,11])
data[order(data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),]
b=data[order(data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),]
head(b[,11])
b=data[order(data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,decreasing=F),]
head(b[,11])
sort(ranking)
barf=sort(ranking)
head(barf)
ranking=order(data[,11]
)
max(ranking)
min(ranking)
ranking=order(as.numeric(data[,11]))
max(ranking)
ranking=order(as.numeric(data[,11]))
ranking[1]
ranking[2]
data[2850,11]
data[2851,11]
ranking=as.numeric(data[,11])
ranking
ranking=numeric(data[,11])
class(data[,11])
unclass(data[,11])
as.numeric(unclass(data[,11]))
as.char(data[,11])
as.character(data[,11])
as.numeric(as.character(data[,11]))
ranking=order(as.numeric(as.character(data[,11])))
head(ranking)
as.numeric(as.character(data[, 11]))
b=sort(as.numeric(as.character(data[, 11])))
head(b)
b[1]
b[2]
b[3]
b=sort(as.numeric(as.character(data[, 11])),decreasing=T)
b
length(b)
length(data[,11])
b=sort(as.numeric(as.character(data[, 11])),decreasing=T,na.last=T)
length(b)
b
order(as.numeric(as.character(data[, 11])),decreasing=F,na.last=T)
b=order(as.numeric(as.character(data[, 11])),decreasing=F,na.last=T)
b[1]
b=seq(1:9)
order(b)
help(order)
b=as.numeric(as.character(data[, 11]))
b
b=order(as.numeric(as.character(data[, 11])),decreasing=F,na.last=T)
b[1]
a=as.numeric(as.character(data[, 11]))
a[b]
data$State
desired_state_data=data[data$State==WV,]
desired_state_data=data[data$State=='WV,]
desired_state_data=data[data$State=='WV',]
desired_state_data=data[data$State='WV',]
data[data$State=='WV',]
desired_state=data[data$State=='WV',]
desired_state_data=data[data$State=='WV',]
remove(desired_state)
ranking=order(as.numeric(as.character(desired_state_data[, 11])),decreasing=F,na.last=T)
ranking
desired_state_data=desired_state_data[ranking,]
desired_state_data
remove(desired_state_data)
desired_data=data[data$State=='WV',]
shape(desired_data)
dim(desired_data)
desired_data$new=as.numeric(as.character(desired_state_data[, column]))
desired_data$new=as.numeric(as.character(desired_data[, column]))
desired_data$new=as.numeric(as.character(desired_data[, 11]))
desired_data[order(desired_data$new,desired_data$Hospital,decreasing=F,na.last=T)]
desired_data[order(desired_data$new,desired_data$Hospital.Name,decreasing=F,na.last=T)]
desired_data[1,]
desired_data$Hospital.Name
desired_data$new
desired_data[order(desired_data$new,desired_data$Hospital.Name),]
b=desired_data[order(desired_data$new,desired_data$Hospital.Name),]
b$new
b=desired_data[order(desired_data$new,desired_data$Hospital.Name,decreasing=T),]
b
desired_data[order(desired_data$new,desired_data$Hospital.Name)]
desired_data=data[data$State==state,]
desired_data$new=as.numeric(as.character(desired_data[, column]))
desired_data[order(desired_data$new,desired_data$Hospital.Name)]
state='WV'
column=11
desired_data=data[data$State==state,]
desired_data$new=as.numeric(as.character(desired_data[, column]))
b=desired_data[order(desired_data$new,desired_data$Hospital.Name,decreasing=T),]
b
b$Hospital.Name
data$Hospital.Name
desired_data$new
b$new
b=desired_data[order(desired_data$new,desired_data$Hospital.Name,decreasing=F),]
b.Hospital.Name[1]
desired_data[order(desired_data[,11],desired_data$Hospital.Name,decreasing=F),]
d=desired_data[order(desired_data[,11],desired_data$Hospital.Name,decreasing=F),]
d$new
b$Hospital.Name[1]
b$Hospital.Name[[1]
]
b$Hospital.Name[[1]]
as.char(b$Hospital.Name[1])
as.character(b$Hospital.Name[1])
desired_data=data[data$State==state,]
b=desired_data[order(desired_data[,column],desired_data$Hospital.Name,decreasing=F),]
b[,11]
b$Hospital.Name
best=function(state,outcome){
if!(outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
data <- read.csv("outcome-of-care-measures.csv")
if!(state %in% levels(data$State)){
stop('invalid state')
}
if(outcome=='heart attack'){
column=11
}else if(outcome=='heart failure'){
column=17
}else{
column=23
}
desired_data=data[data$State==state,]
#    desired_data$new=as.numeric(as.character(desired_data[, column]))
b=desired_data[order(desired_data[,column],desired_data$Hospital.Name,decreasing=F),]
as.character(b$Hospital.Name[1])
}
best=function(state,outcome){
if!(outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
data <- read.csv("outcome-of-care-measures.csv")
if!(state %in% levels(data$State)){
stop('invalid state')
}
if(outcome=='heart attack'){
column=11
}else if(outcome=='heart failure'){
column=17
}else{
column=23
}
desired_data=data[data$State==state,]
#    desired_data$new=as.numeric(as.character(desired_data[, column]))
b=desired_data[order(desired_data[,column],desired_data$Hospital.Name,decreasing=F),]
as.character(b$Hospital.Name[1])
}
remove(list=ls())
pwd
getwd()
best=function(state,outcome){
if!(outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
data <- read.csv("outcome-of-care-measures.csv")
if!(state %in% levels(data$State)){
stop('invalid state')
}
if(outcome=='heart attack'){
column=11
}else if(outcome=='heart failure'){
column=17
}else{
column=23
}
desired_data=data[data$State==state,]
#    desired_data$new=as.numeric(as.character(desired_data[, column]))
b=desired_data[order(desired_data[,column],desired_data$Hospital.Name,decreasing=F),]
as.character(b$Hospital.Name[1])
}
outcome %in% c('heart attack','heart failure','pneumonia')
outcome='heart failure'
outcome %in% c('heart attack','heart failure','pneumonia')
!outcome %in% c('heart attack','heart failure','pneumonia')
best=function(state,outcome){
if(!outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
data <- read.csv("outcome-of-care-measures.csv")
if!(state %in% levels(data$State)){
stop('invalid state')
}
if(outcome=='heart attack'){
column=11
}else if(outcome=='heart failure'){
column=17
}else{
column=23
}
desired_data=data[data$State==state,]
#    desired_data$new=as.numeric(as.character(desired_data[, column]))
b=desired_data[order(desired_data[,column],desired_data$Hospital.Name,decreasing=F),]
as.character(b$Hospital.Name[1])
}
best=function(state,outcome){
if(!outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
data <- read.csv("outcome-of-care-measures.csv")
if(!state %in% levels(data$State)){
stop('invalid state')
}
if(outcome=='heart attack'){
column=11
}else if(outcome=='heart failure'){
column=17
}else{
column=23
}
desired_data=data[data$State==state,]
#    desired_data$new=as.numeric(as.character(desired_data[, column]))
b=desired_data[order(desired_data[,column],desired_data$Hospital.Name,decreasing=F),]
as.character(b$Hospital.Name[1])
}
best('MD','heart attack')
best('MD','pneumonia')
exists(data)
exists('data')
best=function(state,outcome){
if(!outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
if (!exists('data')){
data <- read.csv("outcome-of-care-measures.csv")}
if(!state %in% levels(data$State)){
stop('invalid state')
}
if(outcome=='heart attack'){
column=11
}else if(outcome=='heart failure'){
column=17
}else{
column=23
}
desired_data=data[data$State==state,]
#    desired_data$new=as.numeric(as.character(desired_data[, column]))
b=desired_data[order(desired_data[,column],desired_data$Hospital.Name,decreasing=F),]
as.character(b$Hospital.Name[1])
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
pwd
getwd()
setwd('../')
dir()
submit()
setwd('/Users/jenniferli/Desktop/R/homework')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
best=function(state,outcome){
if(!outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
if (!exists('data')){
data <- read.csv("outcome-of-care-measures.csv")}
if(!state %in% levels(data$State)){
stop('invalid state')
}
if(outcome=='heart attack'){
column=11
}else if(outcome=='heart failure'){
column=17
}else{
column=23
}
desired_data=data[data$State==state,]
#    desired_data$new=as.numeric(as.character(desired_data[, column]))
b=desired_data[order(desired_data[,column],desired_data$Hospital.Name,decreasing=F),]
as.character(b$Hospital.Name[1])
}
best('MD','heart attack')
!exists('data')
data
data <- read.csv("outcome-of-care-measures.csv")}
data <- read.csv("outcome-of-care-measures.csv")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
x=1:4
p=x/sum(x)
p
temp=rbind(x,p)
temp
sum(x*p)
x*p
mean(x*p)
1.0*0.1+2.0*0.2+3.0*0.3+4.0*0.4
3/4
0.5*(1-0)+0.5*1
6/8
x*p
sum(x*p)
setwd('/Users/jenniferli/Desktop/R/homework/')
setwd('/Users/jenniferli/Desktop/ExData_Plotting1/')
get_data=function(){
#### reading in the dates, and selecting the rows corresponding to the dates of interest
dates=read.table('household_power_consumption.txt',header=TRUE,sep=';')$Date
formatted_dates=as.Date(as.character(dates),format="%d/%m/%Y")
desired_rows=which((formatted_dates>'2007-01-31')&(formatted_dates<'2007-02-03'))
#### clearing some space from memory
rm(dates,formatted_dates)
#### grabbing desired rows of the table
data=read.table('household_power_consumption.txt',header=TRUE,sep=';')[desired_rows,]
return(data)
}
# function that turns factor levels into numeric
make_numeric=function(x){
as.numeric(as.character(x))
}
#### PLOT 2
# prelims: getting data, creating a new column of Date/Time (a POSIXlt object)
data=get_data()
data$DateTime=paste(as.character(data$Date),as.character(data$Time))
data$DateTime=strptime(data$DateTime, "%d/%m/%Y %H:%M:%S")
x=data$DateTime
y=make_numeric(data$Global_active_power)
# actually plotting
quartz()
plot(x,y,ylab='Global Active Power (kilowatts)',xlab='',type='l')
# going to folder and saving
setwd('/Users/jenniferli/Desktop/ExData_Plotting1/figure/')
dev.copy(png,'plot2.png')
dev.off()
data=get_data()
data$DateTime=paste(as.character(data$Date),as.character(data$Time))
data$DateTime=strptime(data$DateTime, "%d/%m/%Y %H:%M:%S")
x=data$DateTime
y=make_numeric(data$Global_active_power)
data
get_data=function(){
#### reading in the dates, and selecting the rows corresponding to the dates of interest
dates=read.table('household_power_consumption.txt',header=TRUE,sep=';')$Date
formatted_dates=as.Date(as.character(dates),format="%d/%m/%Y")
desired_rows=which((formatted_dates>'2007-01-31')&(formatted_dates<'2007-02-03'))
#### clearing some space from memory
rm(dates,formatted_dates)
#### grabbing desired rows of the table
data=read.table('household_power_consumption.txt',header=TRUE,sep=';')[desired_rows,]
return(data)
}
# function that turns factor levels into numeric
make_numeric=function(x){
as.numeric(as.character(x))
}
get_data=function(){
#### reading in the dates, and selecting the rows corresponding to the dates of interest
dates=read.table('household_power_consumption.txt',header=TRUE,sep=';')$Date
formatted_dates=as.Date(as.character(dates),format="%d/%m/%Y")
desired_rows=which((formatted_dates>'2007-01-31')&(formatted_dates<'2007-02-03'))
#### clearing some space from memory
rm(dates,formatted_dates)
#### grabbing desired rows of the table
data=read.table('household_power_consumption.txt',header=TRUE,sep=';')[desired_rows,]
return(data)
}
# function that turns factor levels into numeric
make_numeric=function(x){
as.numeric(as.character(x))
}
data=get_data()
data$DateTime=paste(as.character(data$Date),as.character(data$Time))
data$DateTime=strptime(data$DateTime, "%d/%m/%Y %H:%M:%S")
x=data$DateTime
y=make_numeric(data$Global_active_power)
# actually plotting
quartz()
plot(x,y,ylab='Global Active Power (kilowatts)',xlab='',type='l')
# going to folder and saving
setwd('/Users/jenniferli/Desktop/ExData_Plotting1/figure/')
dev.copy(png,'plot2.png')
dev.off()
x=data$DateTime
y=make_numeric(data$Global_active_power)
# setting up the save file
setwd('/Users/jenniferli/Desktop/ExData_Plotting1/figure/')
png(filename='plot4.png')
#setting up the panels
par(mfrow=c(2,2))
# panel 1
plot(x,y,ylab='Global Active Power (kilowatts)',xlab='',type='l')
# panel 2
plot(x,make_numeric(data$Voltage),ylab='Voltage',xlab='datetime',type='l')
# panel 3
plot(x,make_numeric(data$Sub_metering_1),ylab='Energy sub metering',xlab='',yaxt='n',ylim=c(0,35),type='l',col='black')
lines(x,make_numeric(data$Sub_metering_2),col='red')
lines(x,make_numeric(data$Sub_metering_3),col='blue')
legend("topright",c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col = c('black','red','blue'),lwd=1,bty='n')
# panel 4
plot(x,make_numeric(data$Global_reactive_power),yaxt='n',ylab='Global_reactive_power',xlab='datetime',type='l')
axis(side=2, at=seq(0.0,0.5,0.1),labels=seq(0.0,0.5,0.1))
dev.off()
plot(x,make_numeric(data$Global_reactive_power),yaxt='n',ylab='Global_reactive_power',xlab='datetime',type='l')
axis(side=2, at=seq(0.0,0.5,by=0.1),labels=seq(0.0,0.5,by=0.1))
seq(0.0,0.5,by=0.1)
axis(side=2, at=seq(0.0,0.5,by=0.1),labels=c(0.0,0.1,0.2,0.3,0.4,0.5))
axis(side=2, at=seq(0.0,0.5,by=0.1),labels=c(0.0,0.1,0.2,0.3,0.4,0.5))
axis(side=2, at=seq(0.0,0.5,by=0.1),labels=c('0.0','0.1','0.2','0.3','0.4','0.5'))
# panel 4
plot(x,make_numeric(data$Global_reactive_power),yaxt='n',ylab='Global_reactive_power',xlab='datetime',type='l')
axis(side=2, at=seq(0.0,0.5,by=0.1),labels=c(0.0,0.1,0.2,0.3,0.4,0.5))
# panel 4
plot(x,make_numeric(data$Global_reactive_power),yaxt='n',ylab='Global_reactive_power',xlab='datetime',type='l')
axis(side=2, at=seq(0.0,0.5,by=0.1),labels=c('0.0','0.1','0.2','0.3','0.4','0.5'))
# setting up the save file
setwd('/Users/jenniferli/Desktop/ExData_Plotting1/figure/')
png(filename='plot4.png')
#setting up the panels
par(mfrow=c(2,2))
# panel 1
plot(x,y,ylab='Global Active Power (kilowatts)',xlab='',type='l')
# panel 2
plot(x,make_numeric(data$Voltage),ylab='Voltage',xlab='datetime',type='l')
# panel 3
plot(x,make_numeric(data$Sub_metering_1),ylab='Energy sub metering',xlab='',yaxt='n',ylim=c(0,35),type='l',col='black')
lines(x,make_numeric(data$Sub_metering_2),col='red')
lines(x,make_numeric(data$Sub_metering_3),col='blue')
legend("topright",c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col = c('black','red','blue'),lwd=1,bty='n')
# panel 4
plot(x,make_numeric(data$Global_reactive_power),yaxt='n',ylab='Global_reactive_power',xlab='datetime',type='l')
axis(side=2, at=seq(0.0,0.5,by=0.1),labels=c('0.0','0.1','0.2','0.3','0.4','0.5'))
dev.off()
remove(list=ls())
