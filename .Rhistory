cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
> my_matrix <- makeCacheMatrix(matrix(1:10, 2, 5))
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix <- makeCacheMatrix(matrix(1:10, 2, 10))
my_matrix$get()
cacheSolve(my_matrix)
?solve
my_matrix <- makeCacheMatrix(matrix(1:100, 10, 10))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:9, 3, 3))
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:9, 3, 3))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
source("ProgrammingAssignment2/cachematrix.R")
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix <- makeCacheMatrix(matrix(1:9, 3, 3))
my_matrix$get()
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 1, 4), 2, 2)))
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 1, 4), 2, 2)))
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 1, 4), 2, 2))
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 1, 4), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 6, 4), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 6, 4), 2, 2))
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 6, 4), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 6, 4), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 4), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
?if
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 4), 2, 2))
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 4), 2, 2))
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv_ <-- x$getInverse()
# trigger for cacheSolve to compute so each time the matrix changes it's computed again
inv <- NULL
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
# list the functions
list(get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# dasdasdads
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Already computed")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 4), 2, 2))
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 4), 2, 2))
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
# trigger for cacheSolve to compute so each time the matrix changes it's computed again
inv <- NULL
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
# list the functions
list(get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# dasdasdads
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Already computed")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 4), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 5), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$get()
## This function creates a "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
# trigger for cacheSolve to compute so each time the matrix changes it's computed again
inv_ <- getInverse()
inv <- NULL
# list the functions kind of interface
list(get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# dasdasdads
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Already computed cached result is returned")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
## This function creates a "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
# trigger for cacheSolve to compute so each time the matrix changes it's computed again
inv_ <- getInverse()
inv <- NULL
# list the functions kind of interface
list(get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# dasdasdads
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Already computed cached result is returned")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
## This function creates a "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
# trigger for cacheSolve to compute so each time the matrix changes it's computed again
inv_ <- getInverse()
inv <- NULL
# list the functions kind of interface
list(get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# dasdasdads
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Already computed cached result is returned")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 5), 2, 2))
## This function creates a "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
# trigger for cacheSolve to compute so each time the matrix changes it's computed again
inv_ <- getInverse()
# list the functions kind of interface
list(get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# dasdasdads
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("Already computed cached result is returned")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 5), 2, 2))
my_matrix$get()
my_matrix$getInverse()
c <- c + 1
c <- 1 + c
c <- 1
c <- c + 1
c
inv
invere
inverse
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 5), 2, 2))
my_matrix$get()
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(c(2, 2, 3, 5), 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
set.seed(1)
rpois(5, 2)
set.seed(10)
x<- rep(0:1, each = 5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
?best
pwd
pwd()
source("best.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source("rankh")
source("rankh.R")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source("ranka")
source("ranka.R")
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
par("lty")
x <- rnorm(100)
hist(x)
plot(x)
y > rnorm(199)
y > rnorm(100)
a <- rnorm(100)
plot(x,a)
clear()
install.packages("dplyr")
library(dplyr)
setwd(C:\Users\d034390\ExData_Plotting1)
setwd("C:\Users\d034390\ExData_Plotting1")
setwd("C:/Users/d034390/ExData_Plotting1")
dir()
po <- readRDS("household_power_consumption.txt")
?read.tablw()
?read.table()
po <- read.table("household_power_consumption.txt", header = TRUE, nrows = 100, na.strings = "?" )
str(po)
po
po <- read.table("household_power_consumption.txt", header = TRUE, nrows = 100, na.strings = "?" , sep = ";")
po
str(po)
po <- read.table("household_power_consumption.txt", header = TRUE, nrows = 100, na.strings = "?" , sep = ";" ,stringsAsFactors = FALSE)
str(po)
power <- read.table("household_power_consumption.txt", header = TRUE, nrows = 100, na.strings = "?" , sep = ";")
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
power$Time <- as.Time(power$Time, format="%h/%m/%s")
po <- read.table("household_power_consumption.txt", header = TRUE, nrows = 100, na.strings = "?" , sep = ";" ,stringsAsFactors = FALSE)
?as.data.frame.POSIXlt
?as.date
?as.date()
power <- read.table("household_power_consumption.txt", header = TRUE, nrows = 100, na.strings = "?" , sep = ";")
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
power$Time <- as.POSIXlt(power$Time)
str(po)
power <- read.table("household_power_consumption.txt", header = TRUE, nrows = 100, na.strings = "?" , sep = ";")
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
str(po)
setwd(C:\Users\d034390\ExData_Plotting1)
?as.Date()
dataloader()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dataloader(9)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dl -> function() {
}
source('~/.active-rstudio-document')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
f <- function(num) {
for(i in seq_len(num)) {
cat("Hello, world!\n")
}
}
+ }
f(2)
dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
dl()
dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
str(filtered_power)
dl <- function() {
# change wd
setwd("C:/Users/d034390/ExData_Plotting1")
# load the libs
library(dplyr)
# read file (I alreday unzipped the file)
power <- read.table("household_power_consumption.txt", header = TRUE, na.strings = "?" , sep = ";")
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
# subset the data
filtered_power <- filter(power, Date == "1/2/2007" & Date == "2/2/2007" )
#create a timestamp to the x achis lableing
filtered_power$timestamp <-paste(filtered_power$Date, filtered_power$Time)
dl <- function() {
# change wd
setwd("C:/Users/d034390/ExData_Plotting1")
# load the libs
library(dplyr)
# read file (I alreday unzipped the file)
power <- read.table("household_power_consumption.txt", header = TRUE, na.strings = "?" , sep = ";")
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
# subset the data
filtered_power <- filter(power, Date == "1/2/2007" & Date == "2/2/2007" )
#create a timestamp to the x achis lableing
filtered_power$timestamp <-paste(filtered_power$Date, filtered_power$Time)
}
dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
dl(5)
power <- read.table("household_power_consumption.txt", header = TRUE, na.strings = "?" , sep = ";")
dl()
C
exit
exit()
stop
quit
power <- read.table("household_power_consumption.txt", header = TRUE, na.strings = "?" , sep = ";")
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
filtered_power <- filter(power, Date == "1/2/2007" & Date == "2/2/2007" )
str(filtered_power)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
str(power)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
str(po)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
str(po)
str(po)
dl()
dl()
po <- 1
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
dl()
str(po)
a <- dl()
str(a)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
a <- dl()
str(a)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
a <- dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
a <- dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
a <- dl()
View(a)
View(a)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
a <- dl()
View(a)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
a <- dl()
?return
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
a <- dl()
View(a)
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
plot1(a)
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
plot1(a)
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
plot1(a)
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
plot1(a)
hist(a)
hist(a$Global_active_power)
source('C:/Users/d034390/ExData_Plotting1/plot1.R')
plot1(a)
View(a)
View(a)
source('C:/Users/d034390/ExData_Plotting1/plot2.R')
plot2(a)
source('C:/Users/d034390/ExData_Plotting1/plot2.R')
source('C:/Users/d034390/ExData_Plotting1/plot2.R')
plot2(a)
source('C:/Users/d034390/ExData_Plotting1/plot2.R')
plot2(a)
source('C:/Users/d034390/ExData_Plotting1/plot2.R')
plot2(a)
source('C:/Users/d034390/ExData_Plotting1/plot2.R')
source('C:/Users/d034390/ExData_Plotting1/plot2.R')
plot3(a)
source('C:/Users/d034390/ExData_Plotting1/plot3.R')
source('C:/Users/d034390/ExData_Plotting1/plot3.R')
plot3(a)
source('C:/Users/d034390/ExData_Plotting1/plot3.R')
plot3(a)
source('C:/Users/d034390/ExData_Plotting1/plot4.R')
source('C:/Users/d034390/ExData_Plotting1/plot4.R')
plot4(a)
source('C:/Users/d034390/ExData_Plotting1/plot4.R')
plot4(a)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
plot4(a)
datetime <- strptime(paste(dataset$Date, dataset$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
datetime <- strptime(paste(a$Date, a$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(a$Global_active_power)
subMetering1 <- as.numeric(a$Sub_metering_1)
plot(3)
plot(3)
a <- dataloader()
a <- dl()
source('C:/Users/d034390/ExData_Plotting1/DataLoader.R')
a <- dl()
source('C:/Users/d034390/ExData_Plotting1/plot4.R')
source('C:/Users/d034390/ExData_Plotting1/plot3.R')
plot3(a)
source('C:/Users/d034390/ExData_Plotting1/plot3.R')
plot3(a)
source('C:/Users/d034390/ExData_Plotting1/plot4.R')
plot4(a)
source('C:/Users/d034390/ExData_Plotting1/plot4.R')
