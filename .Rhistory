ls
pwd
setwd()
pwd
if(!file.exists("exdata-data-household_power_consumption.zip")) {
temp <- tempfile()
fileURL<-"http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, temp, method="curl")
file <- unzip(temp)
unlink(temp)
}
power <- read.table(file, header=T, sep=";")
# values of all observations in a DF from read.table is by default character, need to convert them
# use as.Date( ) function to convert character data to dates
#
# The date is already in the %m/%d/%Y format
power$Date <- as.Date(power$Date, format="%m/%d/%Y")
#
# Extract only the observations that fall w/n these two dates
#
begdate<-"2007-02-01"
enddate<-"2007-02-02"
df <- power[(power$Date==begdate) | (power$Date==enddate),]
#
# Now need to convert the other data into usable type for processing
#
worm<-c("Global_active_power", "Global_reactive_power", "Voltage", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
for (i in worm)
{
df[,i]<- as.numeric(as.character(df[,i]))
}
#
df <- transform(df, timestamp=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
q()
if(!file.exists("exdata-data-household_power_consumption.zip")) {
temp <- tempfile()
fileURL<-"http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, temp, method="curl")
file <- unzip(temp)
unlink(temp)
}
power <- read.table(file, header=T, sep=";")
# values of all observations in a DF from read.table is by default character, need to convert them
# use as.Date( ) function to convert character data to dates
#
# The date is already in the %d/%m/%Y format in the data frame, so instruct the as.Date() accordingly
#
power$Date <- as.Date(power$Date, format="%d/%m/%Y")
#
# Extract only the observations that fall w/n these two dates
#
begdate<-"2007-02-01"
enddate<-"2007-02-02"
df <- power[(power$Date==begdate) | (power$Date==enddate),]
#
# Now need to convert the other data into usable type for processing
#
worm<-c("Global_active_power", "Global_reactive_power", "Voltage", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
for (i in worm)
{
df[,i]<- as.numeric(as.character(df[,i]))
}
#
df <- transform(df, timestamp=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
hist(df$Global_active_power,
main=(Global Active Power),
col="red",
xlab="Global Active Power (kW)"
)
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)"
)
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power \(kW\)"
)
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab='Global Active Power (kW)'
)
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab='Global Active Power \(kW\)'
)
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab='Global Active Power \\(kW\\)'
)
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power \\(kW\\)"
)
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power \(kW\)"
)
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)")
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)")
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)")
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)")
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)")
plot(df$timestamp, df$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kW)")
plot(df$timestamp,df$Sub_metering_1, type="n", xlab="", ylab="Energy sub metering")
lines(df$timestamp,df$Sub_metering_1, col="black")
lines(df$timestamp,df$Sub_metering_2, col="red")
lines(df$timestamp,df$Sub_metering_3, col="blue")
# Legend
legend("topright", col=c("black","red","blue"), c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=c(1,1), lwd=c(1,1))
par(mfrow = c(2,2))
#plot 1
plot(df$timestamp, df$Global_active_power, type="l", ylab="Global Active Power")
#plot 2
plot(df$timestamp, df$Voltage, type="l", xlab="datatime", ylab="Voltage")
#plot 3
plot2()
#plot 4
plot(df$timestamp, df$Global_reactive_power, type="l", xlab="datatime", ylab="Global Reactive Power")
plot2<-function
{
plot(df$timestamp, df$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kW)")
dev.copy(png, file="plot2.png", width=480, height=480)
dev.off()
cat("Done! plot2.png has been save to", getwd())
}
# mfrow or mfcol, doesn't matter in this case
par(mfrow = c(2,2))
#plot 1
plot(df$timestamp, df$Global_active_power, type="l", ylab="Global Active Power")
#plot 2
plot(df$timestamp, df$Voltage, type="l", xlab="datatime", ylab="Voltage")
#plot 3
plot2()
#plot 4
plot(df$timestamp, df$Global_reactive_power, type="l", xlab="datatime", ylab="Global Reactive Power")
plot2<-function
{
plot(df$timestamp, df$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kW)")}
# mfrow or mfcol, doesn't matter in this case
par(mfrow = c(2,2))
#plot 1
plot(df$timestamp, df$Global_active_power, type="l", ylab="Global Active Power")
#plot 2
plot(df$timestamp, df$Voltage, type="l", xlab="datatime", ylab="Voltage")
#plot 3
plot2()
#plot 4
plot(df$timestamp, df$Global_reactive_power, type="l", xlab="datatime", ylab="Global Reactive Power")
plot2<-function()
{
plot(df$timestamp, df$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kW)")}
# mfrow or mfcol, doesn't matter in this case
par(mfrow = c(2,2))
#plot 1
plot(df$timestamp, df$Global_active_power, type="l", ylab="Global Active Power")
#plot 2
plot(df$timestamp, df$Voltage, type="l", xlab="datatime", ylab="Voltage")
#plot 3
plot2()
#plot 4
plot(df$timestamp, df$Global_reactive_power, type="l", xlab="datatime", ylab="Global Reactive Power")
plot3<-function ()
{
plot(df$timestamp,df$Sub_metering_1, type="n", xlab="", ylab="Energy sub metering")
lines(df$timestamp,df$Sub_metering_1, col="black")
lines(df$timestamp,df$Sub_metering_2, col="red")
lines(df$timestamp,df$Sub_metering_3, col="blue")
# Legend
legend("topright",
col=c("black","red","blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=c(1,1),
lwd=c(1,1))
}
# mfrow or mfcol, doesn't matter in this case
par(mfrow = c(2,2))
#plot 1
plot(df$timestamp, df$Global_active_power, type="l", ylab="Global Active Power")
#plot 2
plot(df$timestamp, df$Voltage, type="l", xlab="datatime", ylab="Voltage")
#plot 3
plot3()
#plot 4
plot(df$timestamp, df$Global_reactive_power, type="l", xlab="datatime", ylab="Global Reactive Power")
pwd
getwd()
source("plot3.r")
# mfrow or mfcol, doesn't matter in this case
par(mfrow = c(2,2))
#plot 1
plot(df$timestamp, df$Global_active_power, type="l", ylab="Global Active Power")
#plot 2
plot(df$timestamp, df$Voltage, type="l", xlab="datatime", ylab="Voltage")
#plot 3
plot3()
#plot 4
plot(df$timestamp, df$Global_reactive_power, type="l", xlab="datatime", ylab="Global Reactive Power")
f(!file.exists("Assignment1.r"))
{
stop("The data input and processing code, Assignment1.r is missing.  Make sure it's in working directory")
}
source("Assignement1.r")
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)")
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
cat("Done! plot1.png has been saved to", getwd())
if(!file.exists("Assignment1.r"))
{
stop("The data input and processing code, Assignment1.r is missing.  Make sure it's in working directory")
}
source("Assignement1.r")
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)")
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
cat("Done! plot1.png has been saved to", getwd())
if(!file.exists("Assignment1.r"))
{
stop("The data input and processing code, Assignment1.r is missing.  Make sure it's in working directory")
}
source("Assignement1.r")
hist(df$Global_active_power,
main="Global Active Power",
col="red",
xlab="Global Active Power (kW)")
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
cat("Done! plot1.png has been saved to", getwd())
q()
if(!file.exists("Assignment1.r"))
{
stop("The data input and processing code, Assignment1.r is missing.  Make sure it's in working directory")
}
source('Assignment1.r')
plot(df$timestamp, df$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kW)")
dev.copy(png, file="plot2.png", width=480, height=480)
dev.off()
cat("Done! plot2.png has been save to", getwd())
quit()
if(!file.exists("Assignment1.r"))
{
stop("The data input and processing code, Assignment1.r is missing.  Make sure it's in working directory")
}
source('Assignment1.r')
#
# let the plotting begin
#
plot(df$timestamp,df$Sub_metering_1, type="n", xlab="", ylab="Energy sub metering")
lines(df$timestamp,df$Sub_metering_1, col="black")
lines(df$timestamp,df$Sub_metering_2, col="red")
lines(df$timestamp,df$Sub_metering_3, col="blue")
# Legend
legend("topright",
col=c("black","red","blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=c(1,1),
lwd=c(1,1))
# Output file
dev.copy(png, file="plot3.png", width=480, height=480)
dev.off
cat("Yo, plot3.png is done too, yo all can find it in", getwd())
q()
setwd("~/Desktop/SH3.0//Coursera/Johns Hopkins Data Science//Exploratory Data Analysis/Assignments//ExData_Plotting1")
source("plot1.R")
q("no")
