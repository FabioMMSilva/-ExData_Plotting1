library(quantmod)
symbols <- c('BSCFX','FBIOX','HLEMX','POGRX','DJIA','XLE','AAPL','INTC')
getSymbols(symbols)
chartSeries(to.daily(HLEMX),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(quantmod)
chartSeries(to.daily(HLEMX),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(DJIA),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(twitteR)
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
since_var=Sys.Date()-10
x_tweets = searchTwitter("interest rate*",n=500,lang="en", since=str(since_var))
x_text = sapply(x_tweets, function(x) x$getText())
x_text <- iconv(x_text,to="utf-8-mac")
# remove links NNK 6-2-2015
x_text = gsub("http.*", "", x_text)
x_text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", x_text)
# remove Atpeople
x_text = gsub("@\\w+", "", x_text)
# remove numbers
x_text = gsub("[[:digit:]]", "", x_text)
# remove hashtags NNK 6-2-2015
x_text = gsub("#.*","", x_text)
#remove author names that start with "By"
x_text = gsub("by.*","", x_text)
# remove punctuation symbols
x_text = gsub("[[:punct:]]", "", x_text)
# create a corpus
x_corpus = Corpus(VectorSource(x_text))
# create document term matrix applying some transformations
tdm = TermDocumentMatrix(x_corpus,
   control = list(removePunctuation = TRUE,
   stopwords = c("interest","rate","rates",stopwords("SMART"),stopwords("english")),
   removeNumbers = TRUE, tolower = TRUE))
# define tdm as matrix
m = as.matrix(tdm)
# get word counts in decreasing order
word_freqs = sort(rowSums(m), decreasing=TRUE) 
# create a data frame with words and their frequencies
dm = data.frame(word=names(word_freqs), freq=word_freqs)
# plot wordcloud with Title
wordcloud(dm$word,dm$freq,random.order=FALSE,colors=brewer.pal(7,"Dark2"), main="Title")
library(tm)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
### Run sequence to stop ^^
### Apply transformations to x_text variable containing tweet text:
# remove links NNK 6-2-2015
x_text = gsub("http.*", "", x_text)
x_text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", x_text)
# remove Atpeople
x_text = gsub("@\\w+", "", x_text)
# remove numbers
x_text = gsub("[[:digit:]]", "", x_text)
# remove hashtags NNK 6-2-2015
x_text = gsub("#.*","", x_text)
#remove author names that start with "By"
x_text = gsub("by.*","", x_text)
# remove punctuation symbols
x_text = gsub("[[:punct:]]", "", x_text)
# create a corpus
x_corpus = Corpus(VectorSource(x_text))
# create document term matrix applying some transformations
tdm = TermDocumentMatrix(x_corpus,
   control = list(removePunctuation = TRUE,
   stopwords = c("interest","rate","rates",stopwords("SMART"),stopwords("english")),
   removeNumbers = TRUE, tolower = TRUE))
# define tdm as matrix
m = as.matrix(tdm)
# get word counts in decreasing order
word_freqs = sort(rowSums(m), decreasing=TRUE) 
# create a data frame with words and their frequencies
dm = data.frame(word=names(word_freqs), freq=word_freqs)
# plot wordcloud with Title
wordcloud(dm$word,dm$freq,random.order=FALSE,colors=brewer.pal(7,"Dark2"), main="Title")
library(ggplot2)
extraction
Extraction
options(gsubfn.engine = "R")
library('sqldf')
library(RSQLite)
library(tm)
library(ggplot2)
library(RColorBrewer)
library(wordcloud)
library(tm)
library(sqldf)
library(googleVis)
install.packages(googleVis,wordcloud,tm)
install.packages(tm)
install.packages(googleVis,wordcloud)
install.packages(c("googleVis", "tm"))
library(ggplot2)
library(gtable)
df <- data.frame(main.cat = c("A", "A", "B", "B", "C", "D"),
second.cat = c("a1", "a2", "b1", "b2", "c1", "d1"),
value = c(2, 3, 4, 2.5, 1.5, 2.3))
p = ggplot(data = df, aes(x = second.cat, y = value)) +
geom_point() + facet_grid(.~main.cat, space = "free_x", scales = "free_x") +
theme(strip.background = element_rect(fill = NA))
p = p + theme(panel.margin = unit(0, "lines"))
g = ggplotGrob(p)
gtable_show_layout(g)  # to see the layout
# Get the indices for the panels (t=top, l=left, ...
panels <- c(subset(g$layout, name=="panel", se=t:r))
# Get the strip grob
stripGrob = gtable_filter(g, "strip")
# Its height is
height = stripGrob$height
# Add a row below the x-axis tick mark labels,
# the same height as the strip.
g = gtable_add_rows(g, height, unique(panels$b+1))
# Insert the strip grob into the new row
g = gtable_add_grob(g, stripGrob,
t = unique(panels$b+2),
l = min(panels$l),
r = max(panels$r))
# Insert line grobs as boundary lines between major categories
linesGrob = linesGrob(gp = gpar(col = "grey75"))
panelsR = panels$r[-length(panels$r)]
for(i in panelsR+1)  g = gtable_add_grob(g, linesGrob,
t=unique(panels$b+1),
l=i,
b=unique(panels$b+2))
# Insert new columns of zero width to take the line grobs for the first and last boundary lines
panelBound = c(3, max(panels$r)+1)
for(i in panelBound) {
g = gtable_add_cols(g, unit(0, "lines"), i)
g = gtable_add_grob(g, linesGrob,
t=unique(panels$b+1),
l=i+1,
b=unique(panels$b+2))
}
# remove the old strip
g = g[-3, ]
# Draw it
grid.newpage()
grid.draw(g)
library(ggplot2)
library(gtable)
df <- data.frame(main.cat = c("A", "A", "B", "B", "C", "D"),
second.cat = c("a1", "a2", "b1", "b2", "c1", "d1"),
value = c(2, 3, 4, 2.5, 1.5, 2.3))
p = ggplot(data = df, aes(x = second.cat, y = value)) +
geom_point() + facet_grid(.~main.cat, space = "free_x", scales = "free_x") +
theme(strip.background = element_rect(fill = NA))
p = p + theme(panel.margin = unit(0, "lines"))
g = ggplotGrob(p)
gtable_show_layout(g)  # to see the layout
# Get the indices for the panels (t=top, l=left, ...
panels <- c(subset(g$layout, name=="panel", se=t:r))
# Get the strip grob
stripGrob = gtable_filter(g, "strip")
# Its height is
height = stripGrob$height
# Add a row below the x-axis tick mark labels,
# the same height as the strip.
g = gtable_add_rows(g, height, unique(panels$b+1))
# Insert the strip grob into the new row
g = gtable_add_grob(g, stripGrob,
t = unique(panels$b+2),
l = min(panels$l),
r = max(panels$r))
# Insert line grobs as boundary lines between major categories
linesGrob = linesGrob(gp = gpar(col = "grey75"))
panelsR = panels$r[-length(panels$r)]
for(i in panelsR+1)  g = gtable_add_grob(g, linesGrob,
t=unique(panels$b+1),
l=i,
b=unique(panels$b+2))
# Insert new columns of zero width to take the line grobs for the first and last boundary lines
panelBound = c(3, max(panels$r)+1)
for(i in panelBound) {
g = gtable_add_cols(g, unit(0, "lines"), i)
g = gtable_add_grob(g, linesGrob,
t=unique(panels$b+1),
l=i+1,
b=unique(panels$b+2))
}
# remove the old strip
g = g[-3, ]
# Draw it
grid.newpage()
grid.draw(g)
gtable_show_layout(g)  # to see the layout
library(ggplot2)
library(gtable)
library(ggplot2)
library(gtable)
library(ggplot2)
library(gtable)
df <- data.frame(main.cat = c("A", "A", "B", "B", "C", "D"),
second.cat = c("a1", "a2", "b1", "b2", "c1", "d1"),
value = c(2, 3, 4, 2.5, 1.5, 2.3))
p = ggplot(data = df, aes(x = second.cat, y = value)) +
geom_point() + facet_grid(.~main.cat, space = "free_x", scales = "free_x") +
theme(strip.background = element_rect(fill = NA))
p = p + theme(panel.margin = unit(0, "lines"))
g = ggplotGrob(p)
gtable_show_layout(g)  # to see the layout
# Get the indices for the panels (t=top, l=left, ...
panels <- c(subset(g$layout, name=="panel", se=t:r))
# Get the strip grob
stripGrob = gtable_filter(g, "strip")
# Its height is
height = stripGrob$height
# Add a row below the x-axis tick mark labels,
# the same height as the strip.
g = gtable_add_rows(g, height, unique(panels$b+1))
# Insert the strip grob into the new row
g = gtable_add_grob(g, stripGrob,
t = unique(panels$b+2),
l = min(panels$l),
r = max(panels$r))
# Insert line grobs as boundary lines between major categories
linesGrob = linesGrob(gp = gpar(col = "grey75"))
panelsR = panels$r[-length(panels$r)]
for(i in panelsR+1)  g = gtable_add_grob(g, linesGrob,
t=unique(panels$b+1),
l=i,
b=unique(panels$b+2))
# Insert new columns of zero width to take the line grobs for the first and last boundary lines
panelBound = c(3, max(panels$r)+1)
for(i in panelBound) {
g = gtable_add_cols(g, unit(0, "lines"), i)
g = gtable_add_grob(g, linesGrob,
t=unique(panels$b+1),
l=i+1,
b=unique(panels$b+2))
}
# remove the old strip
g = g[-3, ]
# Draw it
grid.newpage()
grid.draw(g)
