chartSeries(to.weekly(XLE),type='matchsticks',subset='last 6 months', chartTheme(theme="white"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(XLE),type='matchsticks',subset='last 6 months', chartTheme(theme="white"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
getSymbols('XOM')
chartSeries(to.daily(XOM),type='matchsticks',subset='last 6 months', chartTheme(theme="dark"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(XOM),type='matchsticks',subset='last 6 months', chartTheme(theme="blue"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(XOM),type='matchsticks',subset='last 6 months', chartTheme(theme="yellow"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(XOM),type='matchsticks',subset='last 6 months', chartTheme('white'),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(XOM),type='candlesticks',subset='last 6 months', chartTheme('white'),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(XLE),type='candlesticks',subset='last 6 months', chartTheme('white'),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(quantmod)
getSymbols('XLE','XOM','DJIA','HACK','INTC')
getSymbols('XOM')
getSymbols('XLE','DJIA')
getSymbols()
chartSeries(to.daily(XLE),type='candlesticks',subset='last 6 months', chartTheme('white'),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
getSymbols('XLE','DJIA')
library(quantstrat)
ls()
dir()
cd /Public
cd Public
dir(Public)
library(quantmod)
ls()
dm
ls()
k
wc
DJIA
ls()
XOM
INTC
library(ggplot2)
ggplot(INTC)
chartSeries(INTC)
HLOVERCO <- (Hi(DJIA)-Lo(DJIA))/(Cl(DJIA)-Op(DJIA))
HLOVERCO
chartSeries(to.daily(HLOVERCO))
chartSeries(HLOVERCO)
qplot(HLOVERCO)
HLOVERCO
chartSeries((Hi(DJIA)-Lo(DJIA))/(Cl(DJIA)-Op(DJIA)))
chartSeries(to.weekly(DJIA),type='matchsticks',subset='last 24 months', chartTheme(theme="white"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.weekly(DJIA),type='line',subset='last 24 months', chartTheme(theme="white"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(DJIA),type='line',subset='last 24 months', chartTheme(theme="white"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(DJIA),type='line',subset='last 14 months', chartTheme(theme="white"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
/theme
/chartTheme
??chartTheme
library(quantmod)#
#
#Create an array 'symbols' to reference desired ts data#
symbols <- c('INTC','XLE','HACK','DJIA')#
#Retrieve data for symbols#
getSymbols(symbols)
chartSeries(to.daily(DJIA),type='line',subset='last 14 months', chartTheme(theme="white"),TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(quantmod)#
#
#Create an array 'symbols' to reference desired ts data#
symbols <- c('INTC','XLE','HACK','DJIA')#
#Retrieve data for symbols#
getSymbols(symbols)
chartSeries(to.daily(DJIA),type='line',subset='last 6 months', chartTheme(chartTheme('white',up.col='blue',dn.col='red')), TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(DJIA),type='candlesticks',subset='last 6 months', chartTheme(chartTheme('white',up.col='blue',dn.col='red')), TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(quantmod)#
#
#Create an array 'symbols' to reference desired ts data#
symbols <- c('INTC','XLE','HACK','DJIA')#
#Retrieve data for symbols#
getSymbols(symbols)
chartSeries(to.daily(DJIA),type='candlesticks',subset='last 6 months', chartTheme(chartTheme('white',up.col='blue',dn.col='red')), TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(quantmod)#
#
#Create an array 'symbols' to reference desired ts data#
symbols <- c('INTC','XLE','HACK','DJIA','FRO')#
#Retrieve data for symbols#
getSymbols(symbols)
candleChart(to.daily(FRO),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=24,fast=8)),theme='beige')
par(mfrow=c(2,2))
candleChart(DJIA,multi.col=TRUE,theme='beige',subset='2007-12::2008')#
candleChart(to.monthly(DJIA),multi.col=TRUE,theme='white',type='candles',subset='2010-01::2015')#
#
candleChart(to.daily(DJIA),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)),theme='beige')#
#
candleChart(to.daily(DJIA),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=24,fast=8)),theme='beige')
op <- par(mfrow=c(3,2))#
for(i in 1:6) {#
  chartSeries(#
    DJIA["2014-01"], "candlesticks", #
    TA=NULL, # No volume plot#
    layout=NULL, #
    yrange=c(15,18)#
  )#
}#
par(op)
par(mfrow=c(2,2))
symbols[1]
len(symbols)
??length
length(symbols)
op <- par(mfrow=c(4,3))#
for(i in length(symbols)) {#
  chartSeries(#
    symbols[i], "candlesticks", #
    TA=NULL, # No volume plot#
    layout=NULL#
  )#
}#
par(op)
symbols
symb <-c(INTC,XLE,HACK,DJIA,FRO)
symb
symbp[1]
symb[1]
colnames(symb)
symb
INTC
DJIA
symb
ls(0)
ls()
tdm
op <- par(mfrow=c(4,3))#
for(i in length(symbols)) {#
  chartSeries(#
    symbols[i], "candlesticks", #
    TA=NULL, # No volume plot#
    layout=NULL#
  )#
}#
par(op)
labels
labels(intc)
labels(INTC)
symbols
labels(symbols)
labels(symbols) <- c("INTC","XLE","HACK","DJIA","FRO")
labels()
names(symbols)
names(symbols)<-c("INTC","XLE","HACK","DJIA","FRO")
symbols
##For loop multicharting.........................................##
#
library(quantmod)#
getSymbols("DJIA")#
#
op <- par(mfrow=c(4,3))#
for(i in length(symbols)) {#
  chartSeries(#
    symbols[i], "candlesticks", #
    TA=NULL, # No volume plot#
    layout=NULL#
  )#
}#
par(op)
names(symbols[i])
##For loop multicharting.........................................##
#
library(quantmod)#
getSymbols("DJIA")#
#
op <- par(mfrow=c(4,3))#
for(i in length(symbols)) {#
  chartSeries(#
    names(symbols[i]), "candlesticks", #
    TA=NULL, # No volume plot#
    layout=NULL#
  )#
}#
par(op)
names(symbols[i])
symbols[1]
labels(symbols[1])
colnames(symbols)
labels(symbols)
library(quantmod)#
#
#Create an array 'symbols' to reference desired ts data#
# ARKW <- ETF investing in BitCoins#
##
# MMJ Stocks <- 'TRTC','CNAB', 'GWPH'#
# MMJ Descr <- ('TerraTech','United C Corp','GW Pharmaceuticals')#
symbols <- c('INTC','XLE','HACK','DJIA','FRO','GE','MMM','BA','ARKW','TRTC')#
#Retrieve data for symbols#
getSymbols(symbols)
candleChart(DJIA,multi.col=TRUE,theme='beige',subset='last 5 months')#
addBBands(slow=10,fast=5)`
''
``
chartSeries(to.daily(DJIA),type='candlesticks',subset='last 6 months', chartTheme(chartTheme('beige',up.col='blue',dn.col='red')), TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(quantmod)
symbols <- c('XLE','XOM','DJIA','GE')#
#
getSymbols(symbols)
candleChart(to.daily(DJIA),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=24,fast=8)),theme='beige')
7.6*19
/4
7.6*19
144.4/9
library(quantmod)#
#
#Create an array 'symbols' to reference desired ts data#
# #
##
#Core symbol array#
symbols <- c('XLE','XOM','DJIA','GE')#
#
getSymbols(symbols)
library(quantmod)#
#
#Create an array 'symbols' to reference desired ts data#
# #
##
#Core symbol array#
symbols <- c('XLE','XOM','DJIA','GE')
getSymbols(symbols)
candleChart(to.daily(DJIA),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=24,fast=8)),theme='beige')
library(quantmod)#
#
#Create an array 'symbols' to reference desired ts data#
# #
##
#Core symbol array#
symbols <- c('XLE','XOM','DJIA','GE')#
#
getSymbols(symbols)
candleChart(to.daily(DJIA),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=24,fast=8)),theme='beige')
library(quantmod)
ls()
DJIA
getSymbols('DJIA','XLE')
getSymbols(DJIA,XLE)
getSymbols('XLE')
symbols <- c('XLE','XOM','DJIA','GE')#
#
getSymbols(symbols)
chartSeries(to.weekly(DJIA),subset='last 3 months')
chartSeries(to.weekly(DJIA),subset='last 12 months')
chartSeries(to.daily(DJIA),subset='last 12 months')
chartSeries(to.weekly(DJIA),subset='last 3 years')
addBBands()
addMACD()
addRSI()
Vo(DJIA)
chartSeries(Op(DJIA)/Vo(DJIA))
chartSeries(Op(DJIA)/Vo(DJIA),subset='last 3 weeks')
addBBands()
addMACD()
chartSeries(Op(DJIA)/Vo(DJIA),subset='last 6 months')
addBBands()
addMACD()
new()
window()
p
# create document term matrix applying some transformations#
tdm = TermDocumentMatrix(x_corpus,#
   control = list(removePunctuation = TRUE,#
   stopwords = c("crude","oil",stopwords("SMART"),stopwords("english")),#
   removeNumbers = TRUE, tolower = TRUE))#
#
# define tdm as matrix#
m = as.matrix(tdm)#
# get word counts in decreasing order#
word_freqs = sort(rowSums(m), decreasing=TRUE) #
# create a data frame with words and their frequencies#
dm = data.frame(word=names(word_freqs), freq=word_freqs)#
#
sortie <- data.frame(dm$word[1:5],sort(dm$freq[1:5],decreasing=TRUE))#
#
# plot wordcloud#
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(7, "Dark2"))
library(tm)#
library(wordcloud)#
library(RColorBrewer)
# create document term matrix applying some transformations#
tdm = TermDocumentMatrix(x_corpus,#
   control = list(removePunctuation = TRUE,#
   stopwords = c("crude","oil",stopwords("SMART"),stopwords("english")),#
   removeNumbers = TRUE, tolower = TRUE))#
#
# define tdm as matrix#
m = as.matrix(tdm)#
# get word counts in decreasing order#
word_freqs = sort(rowSums(m), decreasing=TRUE) #
# create a data frame with words and their frequencies#
dm = data.frame(word=names(word_freqs), freq=word_freqs)#
#
sortie <- data.frame(dm$word[1:5],sort(dm$freq[1:5],decreasing=TRUE))#
#
# plot wordcloud#
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(7, "Dark2"))
# create document term matrix applying some transformations#
tdm = TermDocumentMatrix(x_corpus,#
   control = list(removePunctuation = TRUE,#
   stopwords = c("crude","oil","stock","stocks","market","price","prices",stopwords("SMART"),stopwords("english")),#
   removeNumbers = TRUE, tolower = TRUE))#
#
# define tdm as matrix#
m = as.matrix(tdm)#
# get word counts in decreasing order#
word_freqs = sort(rowSums(m), decreasing=TRUE) #
# create a data frame with words and their frequencies#
dm = data.frame(word=names(word_freqs), freq=word_freqs)#
# Store top x='5' most frequent words#
sortie <- data.frame(dm$word[1:5],sort(dm$freq[1:5],decreasing=TRUE))#
#
# plot wordcloud#
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(7, "Dark2"))
function??
??function
sdf
function()??
sdf
??function()
dswfsd
ls
ls()
GE
sortie
library(twitteR)
library(tm)
library(wordcloud)
RColorBrewer
cat("EXAMPLE 1: sin(x) for a vector --\n")#
# Suppose you have a vector x --#
x = c(0.1,0.6,1.0,1.5)#
#
# The bad way --#
n = length(x)#
r = numeric(n)#
for (i in 1:n) {#
  r[i] = sin(x[i])#
}#
print(r)
n
r
print(sin(x))
N=4; M=100;#
r = matrix(runif(N*M), N, M)
r
library(quantmod)
tm
tdm
text
ls
ls()
stemrw
x_tweets
library(wordcloud)
library(NLP)
library(twitteR)
wordcloud(dm$word,dm$freq,random.order=FALSE,colors=brewer.pal(7,"Dark2"), main="Title")#
}
sortie
INTC
library(quantmod)
ls()
chartSeries(XLE,addBBands())
chartSeries(XLE)
hlemx
HLEMX
chartSeries(to.daily(INTC),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(quantmod)#
symbols <- c('BSCFX','FBIOX','HLEMX','POGRX','DJIA','XLE','AAPL','INTC')#
getSymbols(symbols)#
#
chartSeries(to.daily(HLEMX),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(DJIA),type='candlesticks',subset='last 6 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
chartSeries(to.daily(DJIA),type='candlesticks',subset='last 3 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
INTC
ls()
INTC
DJIA
chartSeries(to.daily(DJIA),type='candlesticks',subset='last 3 months',TA=c(addVo(),addBBands(),addRSI(),addMACD(slow=16,fast=8)))
library(quantmod)
INTC
ls()
AAPL
library(quantmod)
aapl
AAPL
library(twitteR)#
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
runSeq <- function(){#
library(tm)#
library(wordcloud)#
library(RColorBrewer)#
library(ggplot2)#
### GET TWITTER DATA via searchTwitter() and apply basic transformations#
since_var=Sys.Date()-10#
x_tweets = searchTwitter("interest rate*",n=500,lang="en", since=str(since_var))#
x_text = sapply(x_tweets, function(x) x$getText())#
x_text <- iconv(x_text,to="utf-8-mac")#
#
### Apply transformations to x_text variable containing tweet text:#
#
# remove links NNK 6-2-2015#
x_text = gsub("http.*", "", x_text)#
x_text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", x_text)#
# remove Atpeople#
x_text = gsub("@\\w+", "", x_text)#
# remove numbers#
x_text = gsub("[[:digit:]]", "", x_text)#
# remove hashtags NNK 6-2-2015#
x_text = gsub("#.*","", x_text)#
#remove author names that start with "By" #
x_text = gsub("by.*","", x_text)#
# remove punctuation symbols#
x_text = gsub("[[:punct:]]", "", x_text)#
# create a corpus#
x_corpus = Corpus(VectorSource(x_text))#
# create document term matrix applying some transformations#
tdm = TermDocumentMatrix(x_corpus,#
   control = list(removePunctuation = TRUE,#
   stopwords = c("interest","rate","rates",stopwords("SMART"),stopwords("english")),#
   removeNumbers = TRUE, tolower = TRUE))#
#
# define tdm as matrix#
m = as.matrix(tdm)#
# get word counts in decreasing order#
word_freqs = sort(rowSums(m), decreasing=TRUE) #
# create a data frame with words and their frequencies#
dm = data.frame(word=names(word_freqs), freq=word_freqs)#
#
# plot wordcloud with Title#
wordcloud(dm$word,dm$freq,random.order=FALSE,colors=brewer.pal(7,"Dark2"), main="Title")#
}
x_text
since_var=Sys.Date()-10#
x_tweets = searchTwitter("interest rate*",n=500,lang="en", since=str(since_var))#
x_text = sapply(x_tweets, function(x) x$getText())#
x_text <- iconv(x_text,to="utf-8-mac")
move links NNK 6-2-2015#
x_text = gsub("http.*", "", x_text)#
x_text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", x_text)#
# remove Atpeople#
x_text = gsub("@\\w+", "", x_text)#
# remove numbers#
x_text = gsub("[[:digit:]]", "", x_text)#
# remove hashtags NNK 6-2-2015#
x_text = gsub("#.*","", x_text)#
#remove author names that start with "By" #
x_text = gsub("by.*","", x_text)#
# remove punctuation symbols#
x_text = gsub("[[:punct:]]", "", x_text)#
# create a corpus#
x_corpus = Corpus(VectorSource(x_text))#
# create document term matrix applying some transformations#
tdm = TermDocumentMatrix(x_corpus,#
   control = list(removePunctuation = TRUE,#
   stopwords = c("interest","rate","rates",stopwords("SMART"),stopwords("english")),#
   removeNumbers = TRUE, tolower = TRUE))#
#
# define tdm as matrix#
m = as.matrix(tdm)#
# get word counts in decreasing order#
word_freqs = sort(rowSums(m), decreasing=TRUE) #
# create a data frame with words and their frequencies#
dm = data.frame(word=names(word_freqs), freq=word_freqs)#
#
# plot wordcloud with Title#
wordcloud(dm$word,dm$freq,random.order=FALSE,colors=brewer.pal(7,"Dark2"), main="Title")#
}#
# ^^
library(tm)
library(wordcloud)
move links NNK 6-2-2015#
x_text = gsub("http.*", "", x_text)#
x_text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", x_text)#
# remove Atpeople#
x_text = gsub("@\\w+", "", x_text)#
# remove numbers#
x_text = gsub("[[:digit:]]", "", x_text)#
# remove hashtags NNK 6-2-2015#
x_text = gsub("#.*","", x_text)#
#remove author names that start with "By" #
x_text = gsub("by.*","", x_text)#
# remove punctuation symbols#
x_text = gsub("[[:punct:]]", "", x_text)#
# create a corpus#
x_corpus = Corpus(VectorSource(x_text))#
# create document term matrix applying some transformations#
tdm = TermDocumentMatrix(x_corpus,#
   control = list(removePunctuation = TRUE,#
   stopwords = c("interest","rate","rates",stopwords("SMART"),stopwords("english")),#
   removeNumbers = TRUE, tolower = TRUE))#
#
# define tdm as matrix#
m = as.matrix(tdm)#
# get word counts in decreasing order#
word_freqs = sort(rowSums(m), decreasing=TRUE) #
# create a data frame with words and their frequencies#
dm = data.frame(word=names(word_freqs), freq=word_freqs)#
#
# plot wordcloud with Title#
wordcloud(dm$word,dm$freq,random.order=FALSE,colors=brewer.pal(7,"Dark2"), main="Title")#
}#
# ^^
library(dplyr)#
library(data.table)#
library(ggplot2)#
colsToKeep <- c("ST","SEX","WAGP","OCCP","WKL")
library(data.table)
library(dplyr)#
library(data.table)#
library(ggplot2)#
colsToKeep <- c("ST","SEX","WAGP","OCCP","WKL")
colsToKeep
ST
data.table
ls()
label
N
HLOVERCO
220 *25
library(twitteR)
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
getwd()
require("NLP")#
## Some text.#
s <- paste(c("Pierre Vinken, 61 years old, will join the board as a ",#
"nonexecutive director Nov. 29.\n",#
"Mr. Vinken is chairman of Elsevier N.V., ",#
"the Dutch publishing group."),#
collapse = "")#
s <- as.String(s)#
## Need sentence and word token annotations.#
sent_token_annotator <- Maxent_Sent_Token_Annotator()#
word_token_annotator <- Maxent_Word_Token_Annotator()#
a2 <- annotate(s, list(sent_token_annotator, word_token_annotator))#
parse_annotator <- Parse_Annotator()#
## Compute the parse annotations only.#
p <- parse_annotator(s, a2)#
## Extract the formatted parse trees.#
ptexts <- sapply(p$features, `[[`, "parse")#
ptexts#
## Read into NLP Tree objects.#
ptrees <- lapply(ptexts, Tree_parse)#
ptrees
require("NLP"), require("openNLP"),require("openNLPmodels.en")#
## Some text.#
s <- paste(c("Pierre Vinken, 61 years old, will join the board as a ",#
"nonexecutive director Nov. 29.\n",#
"Mr. Vinken is chairman of Elsevier N.V., ",#
"the Dutch publishing group."),#
collapse = "")#
s <- as.String(s)#
## Need sentence and word token annotations.#
sent_token_annotator <- Maxent_Sent_Token_Annotator()#
word_token_annotator <- Maxent_Word_Token_Annotator()#
a2 <- annotate(s, list(sent_token_annotator, word_token_annotator))#
parse_annotator <- Parse_Annotator()#
## Compute the parse annotations only.#
p <- parse_annotator(s, a2)#
## Extract the formatted parse trees.#
ptexts <- sapply(p$features, `[[`, "parse")#
ptexts#
## Read into NLP Tree objects.#
ptrees <- lapply(ptexts, Tree_parse)#
ptrees
require("NLP")
library("OpenNLP")
library("openNLP")
library("openNLPmodels.en")
require("NLP"), require("openNLP"),require("openNLPmodels.en")#
## Some text.#
s <- paste(c("Pierre Vinken, 61 years old, will join the board as a ",#
"nonexecutive director Nov. 29.\n",#
"Mr. Vinken is chairman of Elsevier N.V., ",#
"the Dutch publishing group."),#
collapse = "")#
s <- as.String(s)#
## Need sentence and word token annotations.#
sent_token_annotator <- Maxent_Sent_Token_Annotator()#
word_token_annotator <- Maxent_Word_Token_Annotator()#
a2 <- annotate(s, list(sent_token_annotator, word_token_annotator))#
parse_annotator <- Parse_Annotator()#
## Compute the parse annotations only.#
p <- parse_annotator(s, a2)#
## Extract the formatted parse trees.#
ptexts <- sapply(p$features, `[[`, "parse")#
ptexts#
## Read into NLP Tree objects.#
ptrees <- lapply(ptexts, Tree_parse)#
ptrees
install.packages("sqldf")
library(sqldf)
library("sqldf")
today()
now()
now
time()
sysdate()
sys.date()
date()
date()-12/01/2015
setwd('./Github')
setwd('./ExData_Plotting1')#
#read data for Exercise 1 into memory#
init <- read.table('household_power_consumption.txt',nrows=100,sep=';',header=TRUE,na.strings='?',stringsAsFactors=FALSE)#
classes <- sapply(init,class)#
full <- read.table('household_power_consumption.txt',colClasses=classes,sep=';',header=TRUE,na.strings='?',stringsAsFactors=FALSE)#
full$newdate <- as.Date(full$Date, "%d/%m/%Y")#
full$datetime <- strptime(paste(full$Date,full$Time),'%d/%m/%Y %H:%M:%S')#
#
subset <- subset(full,newdate>='2007-02-01' & newdate<='2007-02-02')#
#
hist(subset$Global_active_power,xlab='Global Active Power(kilowatts)',xlab='datetime',ylab='Frequency',main='Global Active Power',col='red')#
dev.copy(png,'myplot1.png')#
dev.off()#
#
#plot 2#
plot(subset$datetime,subset$Global_active_power,type='l',xlab='datetime',ylab="Global Active Power(kilowatts)")#
dev.copy(png,'myplot2.png')#
dev.off()#
#
#plot 3#
plot(subset$datetime,subset$Sub_metering_1,type='l',xlab='datetime',ylab="Energy sub metering")#
lines(subset$datetime,subset$Sub_metering_2,type='l',col='red')#
lines(subset$datetime,subset$Sub_metering_3,type='l',col='blue')#
dev.copy(png,'myplot3.png')#
dev.off()#
#
#plot 4#
par(mfrow=c(2,2))#
plot(subset$datetime,subset$Global_active_power,type='l',xlab='datetime',ylab="Global Active Power(kilowatts)")#
plot(subset$datetime,subset$Voltage,type='l',ylab="Voltage")#
plot(subset$datetime,subset$Sub_metering_1,type='l',ylab="Energy sub metering")#
lines(subset$datetime,subset$Sub_metering_2,type='l',col='red')#
lines(subset$datetime,subset$Sub_metering_3,type='l',col='blue')#
plot(subset$datetime,subset$Global_reactive_power,type='l',ylab="Global Reactive Power(kilowatts)")#
dev.copy(png,'myplot3.png')#
dev.off()
setwd('./ExData_Plotting1')#
#read data for Exercise 1 into memory#
init <- read.table('household_power_consumption.txt',nrows=100,sep=';',header=TRUE,na.strings='?',stringsAsFactors=FALSE)#
classes <- sapply(init,class)#
full <- read.table('household_power_consumption.txt',colClasses=classes,sep=';',header=TRUE,na.strings='?',stringsAsFactors=FALSE)#
full$newdate <- as.Date(full$Date, "%d/%m/%Y")#
full$datetime <- strptime(paste(full$Date,full$Time),'%d/%m/%Y %H:%M:%S')#
#
subset <- subset(full,newdate>='2007-02-01' & newdate<='2007-02-02')#
#
hist(subset$Global_active_power,xlab='Global Active Power(kilowatts)',xlab='datetime',ylab='Frequency',main='Global Active Power',col='red')#
dev.copy(png,'myplot1.png')#
dev.off()#
#
#plot 2#
plot(subset$datetime,subset$Global_active_power,type='l',xlab='datetime',ylab="Global Active Power(kilowatts)")#
dev.copy(png,'myplot2.png')#
dev.off()#
#
#plot 3#
plot(subset$datetime,subset$Sub_metering_1,type='l',xlab='datetime',ylab="Energy sub metering")#
lines(subset$datetime,subset$Sub_metering_2,type='l',col='red')#
lines(subset$datetime,subset$Sub_metering_3,type='l',col='blue')#
dev.copy(png,'myplot3.png')#
dev.off()#
#
#plot 4#
par(mfrow=c(2,2))#
plot(subset$datetime,subset$Global_active_power,type='l',xlab='datetime',ylab="Global Active Power(kilowatts)")#
plot(subset$datetime,subset$Voltage,type='l',xlab='datetime',ylab="Voltage")#
plot(subset$datetime,subset$Sub_metering_1,type='l',xlab='datetime',ylab="Energy sub metering")#
lines(subset$datetime,subset$Sub_metering_2,type='l',col='red')#
lines(subset$datetime,subset$Sub_metering_3,type='l',col='blue')#
plot(subset$datetime,subset$Global_reactive_power,type='l',xlab='datetime',ylab="Global Reactive Power(kilowatts)")#
dev.copy(png,'myplot3.png')#
dev.off()
#plot 1#
hist(subset$Global_active_power,xlab='Global Active Power(kilowatts)',xlab='datetime',ylab='Frequency',main='Global Active Power',col='red')#
dev.copy(png,'myplot1.png')#
dev.off()
#plot 1#
hist(subset$Global_active_power,xlab='Global Active Power(kilowatts)',ylab='Frequency',main='Global Active Power',col='red')#
dev.copy(png,'myplot1.png')#
dev.off()
#plot 3#
plot(subset$datetime,subset$Sub_metering_1,type='l',xlab='datetime',ylab="Energy sub metering")#
lines(subset$datetime,subset$Sub_metering_2,type='l',col='red')#
lines(subset$datetime,subset$Sub_metering_3,type='l',col='blue')#
dev.copy(png,'myplot3.png')#
dev.off()
par(mfrow=c(2,2))#
plot(subset$datetime,subset$Global_active_power,type='l',xlab='datetime',ylab="Global Active Power(kilowatts)")#
plot(subset$datetime,subset$Voltage,type='l',xlab='datetime',ylab="Voltage")#
plot(subset$datetime,subset$Sub_metering_1,type='l',xlab='datetime',ylab="Energy sub metering")#
lines(subset$datetime,subset$Sub_metering_2,type='l',col='red')#
lines(subset$datetime,subset$Sub_metering_3,type='l',col='blue')#
plot(subset$datetime,subset$Global_reactive_power,type='l',xlab='datetime',ylab="Global Reactive Power(kilowatts)")#
#
dev.copy(png,'myplot4.png')#
dev.off()
